# coding: utf-8

"""
    Rekor

    Rekor is a cryptographically secure, immutable transparency log for signed software releases.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rekor_sdk.api_client import ApiClient


class EntriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_log_entry(self, body, **kwargs):  # noqa: E501
        """Creates an entry in the transparency log  # noqa: E501

        Creates an entry in the transparency log for a detached signature, public key, and content. Items can be included in the request or fetched by the server when URLs are specified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_entry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposedEntry body: (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_log_entry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_log_entry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_log_entry_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an entry in the transparency log  # noqa: E501

        Creates an entry in the transparency log for a detached signature, public key, and content. Items can be included in the request or fetched by the server when URLs are specified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_entry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposedEntry body: (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_log_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_log_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log/entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_entry_by_index(self, log_index, **kwargs):  # noqa: E501
        """Retrieves an entry and inclusion proof from the transparency log (if it exists) by index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_entry_by_index(log_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int log_index: specifies the index of the entry in the transparency log to be retrieved (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_log_entry_by_index_with_http_info(log_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_log_entry_by_index_with_http_info(log_index, **kwargs)  # noqa: E501
            return data

    def get_log_entry_by_index_with_http_info(self, log_index, **kwargs):  # noqa: E501
        """Retrieves an entry and inclusion proof from the transparency log (if it exists) by index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_entry_by_index_with_http_info(log_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int log_index: specifies the index of the entry in the transparency log to be retrieved (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['log_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_entry_by_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'log_index' is set
        if ('log_index' not in params or
                params['log_index'] is None):
            raise ValueError("Missing the required parameter `log_index` when calling `get_log_entry_by_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'log_index' in params:
            query_params.append(('logIndex', params['log_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log/entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_entry_by_uuid(self, entry_uuid, **kwargs):  # noqa: E501
        """Get log entry and information required to generate an inclusion proof for the entry in the transparency log  # noqa: E501

        Returns the entry, root hash, tree size, and a list of hashes that can be used to calculate proof of an entry being included in the transparency log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_entry_by_uuid(entry_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_uuid: the UUID of the entry for which the inclusion proof information should be returned (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_log_entry_by_uuid_with_http_info(entry_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_log_entry_by_uuid_with_http_info(entry_uuid, **kwargs)  # noqa: E501
            return data

    def get_log_entry_by_uuid_with_http_info(self, entry_uuid, **kwargs):  # noqa: E501
        """Get log entry and information required to generate an inclusion proof for the entry in the transparency log  # noqa: E501

        Returns the entry, root hash, tree size, and a list of hashes that can be used to calculate proof of an entry being included in the transparency log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_entry_by_uuid_with_http_info(entry_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_uuid: the UUID of the entry for which the inclusion proof information should be returned (required)
        :return: LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_entry_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_uuid' is set
        if ('entry_uuid' not in params or
                params['entry_uuid'] is None):
            raise ValueError("Missing the required parameter `entry_uuid` when calling `get_log_entry_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_uuid' in params:
            path_params['entryUUID'] = params['entry_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log/entries/{entryUUID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_log_query(self, body, **kwargs):  # noqa: E501
        """Searches transparency log for one or more log entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_log_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLogQuery body: (required)
        :return: list[LogEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_log_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_log_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def search_log_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """Searches transparency log for one or more log entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_log_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLogQuery body: (required)
        :return: list[LogEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_log_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_log_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log/entries/retrieve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LogEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

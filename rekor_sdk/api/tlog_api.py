# coding: utf-8

"""
    Rekor

    Rekor is a cryptographically secure, immutable transparency log for signed software releases.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rekor_sdk.api_client import ApiClient


class TlogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_log_info(self, **kwargs):  # noqa: E501
        """Get information about the current state of the transparency log  # noqa: E501

        Returns the current root hash and size of the merkle tree used to store the log entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool stable: Whether to return a stable checkpoint for the active shard
        :return: LogInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_log_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_log_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_log_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about the current state of the transparency log  # noqa: E501

        Returns the current root hash and size of the merkle tree used to store the log entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool stable: Whether to return a stable checkpoint for the active shard
        :return: LogInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stable' in params:
            query_params.append(('stable', params['stable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_proof(self, last_size, **kwargs):  # noqa: E501
        """Get information required to generate a consistency proof for the transparency log  # noqa: E501

        Returns a list of hashes for specified tree sizes that can be used to confirm the consistency of the transparency log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_proof(last_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int last_size: The size of the tree that you wish to prove consistency to (required)
        :param int first_size: The size of the tree that you wish to prove consistency from (1 means the beginning of the log) Defaults to 1 if not specified 
        :param str tree_id: The tree ID of the tree that you wish to prove consistency for
        :return: ConsistencyProof
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_log_proof_with_http_info(last_size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_log_proof_with_http_info(last_size, **kwargs)  # noqa: E501
            return data

    def get_log_proof_with_http_info(self, last_size, **kwargs):  # noqa: E501
        """Get information required to generate a consistency proof for the transparency log  # noqa: E501

        Returns a list of hashes for specified tree sizes that can be used to confirm the consistency of the transparency log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_proof_with_http_info(last_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int last_size: The size of the tree that you wish to prove consistency to (required)
        :param int first_size: The size of the tree that you wish to prove consistency from (1 means the beginning of the log) Defaults to 1 if not specified 
        :param str tree_id: The tree ID of the tree that you wish to prove consistency for
        :return: ConsistencyProof
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['last_size', 'first_size', 'tree_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_proof" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'last_size' is set
        if ('last_size' not in params or
                params['last_size'] is None):
            raise ValueError("Missing the required parameter `last_size` when calling `get_log_proof`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'first_size' in params:
            query_params.append(('firstSize', params['first_size']))  # noqa: E501
        if 'last_size' in params:
            query_params.append(('lastSize', params['last_size']))  # noqa: E501
        if 'tree_id' in params:
            query_params.append(('treeID', params['tree_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/log/proof', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsistencyProof',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Rekor

    Rekor is a cryptographically secure, immutable transparency log for signed software releases.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'root_hash': 'str',
        'tree_size': 'int',
        'signed_tree_head': 'str',
        'tree_id': 'str',
        'inactive_shards': 'list[InactiveShardLogInfo]'
    }

    attribute_map = {
        'root_hash': 'rootHash',
        'tree_size': 'treeSize',
        'signed_tree_head': 'signedTreeHead',
        'tree_id': 'treeID',
        'inactive_shards': 'inactiveShards'
    }

    def __init__(self, root_hash=None, tree_size=None, signed_tree_head=None, tree_id=None, inactive_shards=None):  # noqa: E501
        """LogInfo - a model defined in Swagger"""  # noqa: E501
        self._root_hash = None
        self._tree_size = None
        self._signed_tree_head = None
        self._tree_id = None
        self._inactive_shards = None
        self.discriminator = None
        self.root_hash = root_hash
        self.tree_size = tree_size
        self.signed_tree_head = signed_tree_head
        self.tree_id = tree_id
        if inactive_shards is not None:
            self.inactive_shards = inactive_shards

    @property
    def root_hash(self):
        """Gets the root_hash of this LogInfo.  # noqa: E501

        The current hash value stored at the root of the merkle tree  # noqa: E501

        :return: The root_hash of this LogInfo.  # noqa: E501
        :rtype: str
        """
        return self._root_hash

    @root_hash.setter
    def root_hash(self, root_hash):
        """Sets the root_hash of this LogInfo.

        The current hash value stored at the root of the merkle tree  # noqa: E501

        :param root_hash: The root_hash of this LogInfo.  # noqa: E501
        :type: str
        """
        if root_hash is None:
            raise ValueError("Invalid value for `root_hash`, must not be `None`")  # noqa: E501

        self._root_hash = root_hash

    @property
    def tree_size(self):
        """Gets the tree_size of this LogInfo.  # noqa: E501

        The current number of nodes in the merkle tree  # noqa: E501

        :return: The tree_size of this LogInfo.  # noqa: E501
        :rtype: int
        """
        return self._tree_size

    @tree_size.setter
    def tree_size(self, tree_size):
        """Sets the tree_size of this LogInfo.

        The current number of nodes in the merkle tree  # noqa: E501

        :param tree_size: The tree_size of this LogInfo.  # noqa: E501
        :type: int
        """
        if tree_size is None:
            raise ValueError("Invalid value for `tree_size`, must not be `None`")  # noqa: E501

        self._tree_size = tree_size

    @property
    def signed_tree_head(self):
        """Gets the signed_tree_head of this LogInfo.  # noqa: E501

        The current signed tree head  # noqa: E501

        :return: The signed_tree_head of this LogInfo.  # noqa: E501
        :rtype: str
        """
        return self._signed_tree_head

    @signed_tree_head.setter
    def signed_tree_head(self, signed_tree_head):
        """Sets the signed_tree_head of this LogInfo.

        The current signed tree head  # noqa: E501

        :param signed_tree_head: The signed_tree_head of this LogInfo.  # noqa: E501
        :type: str
        """
        if signed_tree_head is None:
            raise ValueError("Invalid value for `signed_tree_head`, must not be `None`")  # noqa: E501

        self._signed_tree_head = signed_tree_head

    @property
    def tree_id(self):
        """Gets the tree_id of this LogInfo.  # noqa: E501

        The current treeID  # noqa: E501

        :return: The tree_id of this LogInfo.  # noqa: E501
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this LogInfo.

        The current treeID  # noqa: E501

        :param tree_id: The tree_id of this LogInfo.  # noqa: E501
        :type: str
        """
        if tree_id is None:
            raise ValueError("Invalid value for `tree_id`, must not be `None`")  # noqa: E501

        self._tree_id = tree_id

    @property
    def inactive_shards(self):
        """Gets the inactive_shards of this LogInfo.  # noqa: E501


        :return: The inactive_shards of this LogInfo.  # noqa: E501
        :rtype: list[InactiveShardLogInfo]
        """
        return self._inactive_shards

    @inactive_shards.setter
    def inactive_shards(self, inactive_shards):
        """Sets the inactive_shards of this LogInfo.


        :param inactive_shards: The inactive_shards of this LogInfo.  # noqa: E501
        :type: list[InactiveShardLogInfo]
        """

        self._inactive_shards = inactive_shards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Rekor

    Rekor is a cryptographically secure, immutable transparency log for signed software releases.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchIndex(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'public_key': 'SearchIndexPublicKey',
        'hash': 'str',
        'operator': 'str'
    }

    attribute_map = {
        'email': 'email',
        'public_key': 'publicKey',
        'hash': 'hash',
        'operator': 'operator'
    }

    def __init__(self, email=None, public_key=None, hash=None, operator=None):  # noqa: E501
        """SearchIndex - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._public_key = None
        self._hash = None
        self._operator = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if public_key is not None:
            self.public_key = public_key
        if hash is not None:
            self.hash = hash
        if operator is not None:
            self.operator = operator

    @property
    def email(self):
        """Gets the email of this SearchIndex.  # noqa: E501


        :return: The email of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SearchIndex.


        :param email: The email of this SearchIndex.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def public_key(self):
        """Gets the public_key of this SearchIndex.  # noqa: E501


        :return: The public_key of this SearchIndex.  # noqa: E501
        :rtype: SearchIndexPublicKey
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SearchIndex.


        :param public_key: The public_key of this SearchIndex.  # noqa: E501
        :type: SearchIndexPublicKey
        """

        self._public_key = public_key

    @property
    def hash(self):
        """Gets the hash of this SearchIndex.  # noqa: E501


        :return: The hash of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SearchIndex.


        :param hash: The hash of this SearchIndex.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def operator(self):
        """Gets the operator of this SearchIndex.  # noqa: E501


        :return: The operator of this SearchIndex.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SearchIndex.


        :param operator: The operator of this SearchIndex.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchIndex, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchIndex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

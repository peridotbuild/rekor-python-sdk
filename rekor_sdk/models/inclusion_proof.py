# coding: utf-8

"""
    Rekor

    Rekor is a cryptographically secure, immutable transparency log for signed software releases.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InclusionProof(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_index': 'int',
        'root_hash': 'str',
        'tree_size': 'int',
        'hashes': 'list[str]',
        'checkpoint': 'str'
    }

    attribute_map = {
        'log_index': 'logIndex',
        'root_hash': 'rootHash',
        'tree_size': 'treeSize',
        'hashes': 'hashes',
        'checkpoint': 'checkpoint'
    }

    def __init__(self, log_index=None, root_hash=None, tree_size=None, hashes=None, checkpoint=None):  # noqa: E501
        """InclusionProof - a model defined in Swagger"""  # noqa: E501
        self._log_index = None
        self._root_hash = None
        self._tree_size = None
        self._hashes = None
        self._checkpoint = None
        self.discriminator = None
        self.log_index = log_index
        self.root_hash = root_hash
        self.tree_size = tree_size
        self.hashes = hashes
        self.checkpoint = checkpoint

    @property
    def log_index(self):
        """Gets the log_index of this InclusionProof.  # noqa: E501

        The index of the entry in the transparency log  # noqa: E501

        :return: The log_index of this InclusionProof.  # noqa: E501
        :rtype: int
        """
        return self._log_index

    @log_index.setter
    def log_index(self, log_index):
        """Sets the log_index of this InclusionProof.

        The index of the entry in the transparency log  # noqa: E501

        :param log_index: The log_index of this InclusionProof.  # noqa: E501
        :type: int
        """
        if log_index is None:
            raise ValueError("Invalid value for `log_index`, must not be `None`")  # noqa: E501

        self._log_index = log_index

    @property
    def root_hash(self):
        """Gets the root_hash of this InclusionProof.  # noqa: E501

        The hash value stored at the root of the merkle tree at the time the proof was generated  # noqa: E501

        :return: The root_hash of this InclusionProof.  # noqa: E501
        :rtype: str
        """
        return self._root_hash

    @root_hash.setter
    def root_hash(self, root_hash):
        """Sets the root_hash of this InclusionProof.

        The hash value stored at the root of the merkle tree at the time the proof was generated  # noqa: E501

        :param root_hash: The root_hash of this InclusionProof.  # noqa: E501
        :type: str
        """
        if root_hash is None:
            raise ValueError("Invalid value for `root_hash`, must not be `None`")  # noqa: E501

        self._root_hash = root_hash

    @property
    def tree_size(self):
        """Gets the tree_size of this InclusionProof.  # noqa: E501

        The size of the merkle tree at the time the inclusion proof was generated  # noqa: E501

        :return: The tree_size of this InclusionProof.  # noqa: E501
        :rtype: int
        """
        return self._tree_size

    @tree_size.setter
    def tree_size(self, tree_size):
        """Sets the tree_size of this InclusionProof.

        The size of the merkle tree at the time the inclusion proof was generated  # noqa: E501

        :param tree_size: The tree_size of this InclusionProof.  # noqa: E501
        :type: int
        """
        if tree_size is None:
            raise ValueError("Invalid value for `tree_size`, must not be `None`")  # noqa: E501

        self._tree_size = tree_size

    @property
    def hashes(self):
        """Gets the hashes of this InclusionProof.  # noqa: E501

        A list of hashes required to compute the inclusion proof, sorted in order from leaf to root  # noqa: E501

        :return: The hashes of this InclusionProof.  # noqa: E501
        :rtype: list[str]
        """
        return self._hashes

    @hashes.setter
    def hashes(self, hashes):
        """Sets the hashes of this InclusionProof.

        A list of hashes required to compute the inclusion proof, sorted in order from leaf to root  # noqa: E501

        :param hashes: The hashes of this InclusionProof.  # noqa: E501
        :type: list[str]
        """
        if hashes is None:
            raise ValueError("Invalid value for `hashes`, must not be `None`")  # noqa: E501

        self._hashes = hashes

    @property
    def checkpoint(self):
        """Gets the checkpoint of this InclusionProof.  # noqa: E501

        The checkpoint (signed tree head) that the inclusion proof is based on  # noqa: E501

        :return: The checkpoint of this InclusionProof.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint

    @checkpoint.setter
    def checkpoint(self, checkpoint):
        """Sets the checkpoint of this InclusionProof.

        The checkpoint (signed tree head) that the inclusion proof is based on  # noqa: E501

        :param checkpoint: The checkpoint of this InclusionProof.  # noqa: E501
        :type: str
        """
        if checkpoint is None:
            raise ValueError("Invalid value for `checkpoint`, must not be `None`")  # noqa: E501

        self._checkpoint = checkpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InclusionProof, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InclusionProof):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
